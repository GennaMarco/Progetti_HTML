*{
	/*i box sono i contenitori (div, p, ecc), con questa istruzione gli dico che il suo contenuto deve essere tutto dentro il mio monitor, evitando quindi che vada a capo da solo se non ci sta*/
	box-sizing: border-box;
	/*border: 1px solid black;*/
	font-size: 16px;
}

html, body {
	margin: 0;
	/*100vh significa il 100% dell'altezza del monitor utilizzato, vh è consigliato metterlo sono nell'html e nel body*/
	/*height: 100vh;*/
	/*overflow: hidden; con questo comando nascono l'overflow del body non permettendo lo scroll e tagliandomi per es. il footer 
	overflow-y; mi permette di scrollare in verticale (x in orizzontale)*/
	height: 100%;
}

body{
	padding-top: 90px;	/*dò un padding top dell'altezza della header e nav che essendo position fixed mi fanno partire la pagina dal container, nascondendolo*/
}

header{
	background: orange;
	padding: 20px;
	width: 100%;
	height: 50px;
	position: fixed; /*un elemento fixed è come se venisse sganciato completamente dall'html, e quindi la pagina partirebbe dalla nav e non più dell'header che è a sè stante*/
	top: 0;
	left: 0;
	right: 0;
	z-index: 100;
}

/*se scrivo header "spazio" .logo andrò a prendere i figli di header che hanno classe logo
mentre se scrivo header.logo andrò a prendere gli header che hanno classe logo
se scrivo header.logo, .altraclasse allora .altraclasse sarà un elemento proprio diverso*/
header .logo{
	float: left;
}

header .login{
	float: right;
}

header .text-color{
	color: white;
}

.text-color{
	color: red;
}

.container{
	clear: both;	/*pulisce i float right e left, e va capo*/
	width: 100%;
	/*height: 100%;*/
	position: relative;
}

/*questo container successivo è detto clearfix e si usa perché il body vede tutti i div come un oggetto unico, anche se vanno a capo con il clear (lo vede come una serpentina), aggiungendo un contenuto vuoto, interrompo la serpentina e ciò che c'è dopo sarà a se stante*/
.container:after{	/*after mi dice appena dopo il container aggiungi quello che c'è dentro*/
	content: "";
	display: block;
	clear: both;
}

nav {
	background: #eee;
	height: 40px;
	padding-top: 9px;
	padding-left: 20px;
	position: fixed;
	top: 50px;
	left: 0;
	right: 0;
	z-index: 100;
}

nav ul{
	list-style: none;
	margin: 0;
	padding: 0;
}

nav ul li{
	float: left;
	margin-right: 10px;
}

nav ul a{
	text-decoration: none;
}

section {
	position: relative;
	float: none;
	height: 100%; /*100% di quello che è ancora disponibile*/
	background: violet;
	width: 100%;
}

aside {
	float: none;
	height: 100%;
	background: red;
	width: 100%;
}

footer {
	background-color: black;
	color: white;
	padding: 10px;
	text-align: center;
	height: 100px; /* di solito l'altezza si metta in px perché è il contenuto che deve essere elastico */ 
	width: 100%;
	clear: left;
}

h1
{
    margin-top: 0;
}

h2
{
    margin-top: 0;
}

/* il margin bottom risulterà più largo perché si somma all'interlinea tra una riga e l'altra del paragrafo */
/*img {
	float: left;
	margin-right: 20px;
    margin-bottom: 20px;	
}*/

/* un'altra soluzione è inserire l'img in un div e lavorare sul div */

/* i div si adattano al loro contenuto (e non alle loro proprietà) 
.img-container{
	background-image: url('./images/torino.png');
	background-repeat: no-repeat; 
	background-size: cover;
	background-attachment: fixed;		
	background-position: center top;
	width: 200px;
	height: 200px;
	float: left;
}*/

img{
	
	width: 100%;
	max-width: 100%;
	height: auto;
}

p{
	text-align: justify;
}

/*RESPONSIVE*/
@media screen and (min-width: 1024px)
{
	*{
       font-size: 20px;
	}
	aside{
		float: right;
		width: 40%;
		position: absolute;
		right: 0;
		top: 0;
		bottom: 0;
	}

	section{
		float: left;
		width: 60%;
	}

	h1
	{
		font-size: 1em; /* in questo caso è 18 px perchè l'abbiamo impostato nel *{} */
	}
}

/*
 @media screen and (min-width: 1024px) and(max-width: 1200px)
 se si vuole impostare un range da 1024 a 1200
 */


